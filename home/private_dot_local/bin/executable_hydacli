#!/usr/bin/env bash

set -a

# ---- paths

hyda_dir="${XDG_DATA_HOME:-$HOME/.local/share}/hyda"
hyda_cache="${XDG_CACHE_HOME:-$HOME/.cache}/hyda"
hyda_lock="$hyda_cache/hyda.lock"
hyda_bin="$hyda_dir/bin"
hyda_scripts=("$hyda_bin"/hyda-*.sh)
rofi_themes="${XDG_CONFIG_HOME:-$HOME/.config}/rofi/configs"
ROFI_SELECTOR_THEME="${rofi_theme}/configs/selector.rasi"
ROFI_PROMPT_THEME="${rofi_theme}/configs/prompt.rasi"

# ---- colors

error=$'\e[31m'
success=$'\e[32m'
warning=$'\e[33m'
info=$'\e[36m'
reset=$'\e[0m'
bold=$'\e[1m'

# ---- icons

isuccess="[✔]"
ierror="[✖]"
iwarning="[!]"
iinfo="[i]"

set +a

# ---- logs

log_success() { echo -e "${success}${isuccess}${reset} ${bold}$*${reset}" >&2; }
log_warning() { echo -e "${warning}${iwarning}${reset} ${bold}$*${reset}" >&2; }
log_error() { echo -e "${error}${ierror}${reset} ${bold}$*${reset}" >&2; }
log_info() { echo -e "${info}${iinfo}${reset} ${bold}$*${reset}" >&2; }

# ---- state

hyda_state() {
  local header="${1:-}" key="${2:-}" value="${3:-}"

  if [[ -z "$header" || -z "$key" || -z "$value" ]]; then
    log_error "Usage: hyda_state <header> <key> <value>" 
    log_info "missing args: header=($header) key=($key) value=($value)"
    return 2
  fi

  mkdir -p "$(dirname "$hyda_lock")"
  touch "$hyda_lock"

  local tmp
  tmp="$(mktemp)"

  awk -v HEADER="[$header]" -v KEY="$key" -v VALUE="$value" '
    BEGIN {
      in_section = 0
      header_found = 0
      key_written = 0
    }

    # When we hit any header line
    /^\[.*\]/ {
      # If we were inside target section and key wasn’t written yet
      if (in_section && !key_written) {
        print KEY ": " VALUE
      }

      # Start new section if it matches
      in_section = ($0 == HEADER)
      if (in_section) {
        header_found = 1
      }

      print
      next
    }

    # Inside target section: update or print
    in_section {
      if ($0 ~ "^" KEY ":[[:space:]]*") {
        print KEY ": " VALUE
        key_written = 1
      } else {
        print
      }
      next
    }

    # Default print for other lines
    { print }

    END {
      # If header never appeared, add it
      if (!header_found) {
        if (NR > 0) print ""
        print HEADER
        print KEY ": " VALUE
      } 
      # If header appeared but we reached EOF while still in it
      else if (in_section && !key_written) {
        print KEY ": " VALUE
      }
    }
  ' "$hyda_lock" > "$tmp" && mv "$tmp" "$hyda_lock"
}

hyda_state_get() {
  local header="$1" key="$2"
  if [[ -z "$header" || -z "$key" ]]; then
    log_error "Usage: hyda_state_get <header> <key>"
    return 1
  fi

  awk -v HEADER="[$header]" -v KEY="$key" '
    $0 == HEADER { found=1; next }
    found && /^\[.*\]/ { exit }
    found && $0 ~ "^" KEY ":[[:space:]]*" {
      sub("^" KEY ":[[:space:]]*", "")
      print; exit
    }
  ' "$hyda_lock" 2>/dev/null
}

export -f log_success log_warning log_error log_info hyda_state hyda_state_get

# ---- functions

usage() {
  cat <<EOF
${bold}Hyda Cli${reset} - cli wrapper for hyda tools

${bold}Usage:${reset}
  hydacli <command> [args...]
  
${bold}Commands:${reset}
EOF
  for f in "${hyda_scripts[@]}"; do
    [[ -f "$f" ]] || continue
    name=$(basename "$f")
    name="${name#hyda-}"
    name="${name%.sh}"
    desc=$(grep -m1 '^# description:' "$f" | cut -d':' -f2- | xargs)
    desc="${desc:-${warning}no description found - possibly external script${reset}}"
    printf "  hydacli %-12s %s\n" "$name" "-> ${info}$desc${reset}"
  done
}

main() {
  local cmd="$1"; shift || true
  if [[ -z "$cmd" ]]; then
    usage
    exit 0
  fi
  local script="$hyda_bin/hyda-${cmd}.sh"
  if [[ -f "$script" ]]; then
    exec -a "hyda-${cmd}" "$script" "$@"
  else
    log_error "Unknown command: $cmd"
    echo
    usage
    exit 1
  fi
}

main "$@"
